import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูู ุงููุฌูุฏ ุงูุฌุฐุฑ
dotenv.config({ path: join(__dirname, '..', '.env') });

console.log('๐ง ุฅุตูุงุญ ูุฎุทุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฅูุชุงุฌ...');

const databaseUrl = process.env.DATABASE_URL || process.env.DB_URL;
const sequelize = new Sequelize(databaseUrl, {
  dialect: 'postgres',
  logging: false,
  dialectOptions: {
    ssl: false
  }
});

async function fixProductionSchema() {
  try {
    await sequelize.authenticate();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช PostgreSQL ุจูุฌุงุญ');
    
    // ุฅุตูุงุญ 1: ุฅุถุงูุฉ ุนููุฏ isMonitored ุฅูู ุฌุฏูู accounts
    console.log('\n๐ง ุฅุถุงูุฉ ุนููุฏ isMonitored ุฅูู ุฌุฏูู accounts...');
    try {
      await sequelize.query(`
        ALTER TABLE accounts 
        ADD COLUMN IF NOT EXISTS "isMonitored" BOOLEAN DEFAULT false;
      `);
      console.log('โ ุชู ุฅุถุงูุฉ ุนููุฏ isMonitored ุจูุฌุงุญ');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('โน๏ธ  ุนููุฏ isMonitored ููุฌูุฏ ูุณุจูุงู');
      } else {
        console.error('โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุนููุฏ isMonitored:', error.message);
      }
    }
    
    // ุฅุตูุงุญ 2: ุงูุชุญูู ูู ุงูุฃุนูุฏุฉ ุงูููููุฏุฉ ุงูุฃุฎุฑู
    console.log('\n๐ ูุญุต ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ...');
    
    const requiredColumns = [
      { name: 'isMonitored', type: 'BOOLEAN', default: 'false' },
      { name: 'categoryAccountId', type: 'UUID', default: 'NULL' },
      { name: 'journalEntryId', type: 'UUID', default: 'NULL' }
    ];
    
    for (const column of requiredColumns) {
      try {
        await sequelize.query(`
          ALTER TABLE accounts 
          ADD COLUMN IF NOT EXISTS "${column.name}" ${column.type} DEFAULT ${column.default};
        `);
        console.log(`โ ุชู ุงูุชุญูู ูู ุนููุฏ ${column.name}`);
      } catch (error) {
        console.log(`โน๏ธ  ุนููุฏ ${column.name} ููุฌูุฏ ูุณุจูุงู ุฃู ูุง ูุญุชุงุฌ ุฅุถุงูุฉ`);
      }
    }
    
    // ุฅุตูุงุญ 3: ุงูุชุญูู ูู ุฌุฏูู gl_entries
    console.log('\n๐ ูุญุต ุฌุฏูู gl_entries...');
    try {
      await sequelize.query(`
        ALTER TABLE gl_entries 
        ADD COLUMN IF NOT EXISTS "journalEntryId" UUID;
      `);
      console.log('โ ุชู ุงูุชุญูู ูู ุนููุฏ journalEntryId ูู gl_entries');
    } catch (error) {
      console.log('โน๏ธ  ุนููุฏ journalEntryId ููุฌูุฏ ูุณุจูุงู ูู gl_entries');
    }
    
    // ุฅุตูุงุญ 4: ุงูุชุญูู ูู ุฌุฏูู fixed_assets
    console.log('\n๐ ูุญุต ุฌุฏูู fixed_assets...');
    try {
      await sequelize.query(`
        ALTER TABLE fixed_assets 
        ADD COLUMN IF NOT EXISTS "categoryAccountId" UUID;
      `);
      console.log('โ ุชู ุงูุชุญูู ูู ุนููุฏ categoryAccountId ูู fixed_assets');
    } catch (error) {
      console.log('โน๏ธ  ุนููุฏ categoryAccountId ููุฌูุฏ ูุณุจูุงู ูู fixed_assets');
    }
    
    // ุงุฎุชุจุงุฑ 5: ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงู ุงูุฐู ูุงู ููุดู
    console.log('\n๐งช ุงุฎุชุจุงุฑ ุงุณุชุนูุงู ุงูุญุณุงุจุงุช...');
    try {
      const [accounts] = await sequelize.query(`
        SELECT 
          "Account"."id", 
          "Account"."code", 
          "Account"."name", 
          "Account"."type", 
          "Account"."isActive", 
          "Account"."isMonitored"
        FROM "accounts" AS "Account" 
        WHERE "Account"."isActive" = true
        ORDER BY "Account"."code" ASC 
        LIMIT 5;
      `);
      
      console.log(`โ ุชู ุฌูุจ ${accounts.length} ุญุณุงุจ ุจูุฌุงุญ`);
      console.log('๐ ุนููุฉ ูู ุงูุญุณุงุจุงุช:');
      accounts.forEach(acc => {
        console.log(`  ${acc.code} - ${acc.name} (ูุฑุงูุจ: ${acc.isMonitored ? 'ูุนู' : 'ูุง'})`);
      });
      
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงุณุชุนูุงู ุงูุญุณุงุจุงุช:', error.message);
    }
    
    // ุฅุตูุงุญ 6: ุฅูุดุงุก ูุฌูุฏ ุงูุฑูุน ุฅุฐุง ูู ููู ููุฌูุฏ
    console.log('\n๐ ุงูุชุญูู ูู ูุฌูุฏ ุงูุฑูุน...');
    try {
      await sequelize.query(`
        SELECT 1; -- Just a test query
      `);
      console.log('โน๏ธ  ูุง ูููู ุฅูุดุงุก ูุฌูุฏุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช - ูุฌุจ ุฅูุดุงุคูุง ูุฏููุงู');
    } catch (error) {
      console.log('โน๏ธ  ูุฌูุฏ ุงูุฑูุน ูุญุชุงุฌ ุฅูุดุงุก ูุฏูู');
    }
    
    // ุฅุตูุงุญ 7: ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ ูุญู ูุดููุฉ 404
    console.log('\n๐ผ๏ธ  ุฅุตูุงุญ ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ...');
    try {
      // ุญุฐู ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ ุงูููุณูุฑุฉ
      await sequelize.query(`
        DELETE FROM settings 
        WHERE key LIKE 'logo%';
      `);
      console.log('โ ุชู ุญุฐู ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ ุงูููุณูุฑุฉ');
      
      // ุฅุนุงุฏุฉ ุชุนููู ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ ุงูุงูุชุฑุงุถูุฉ
      await sequelize.query(`
        INSERT INTO settings (key, value, type, description, "createdAt", "updatedAt")
        VALUES 
        ('logo_filename', NULL, 'string', 'Logo filename', NOW(), NOW()),
        ('logo_originalname', NULL, 'string', 'Logo original name', NOW(), NOW()),
        ('logo_mimetype', NULL, 'string', 'Logo MIME type', NOW(), NOW()),
        ('logo_size', NULL, 'string', 'Logo file size', NOW(), NOW()),
        ('logo_uploaddate', NULL, 'string', 'Logo upload date', NOW(), NOW())
        ON CONFLICT (key) DO UPDATE SET
        value = EXCLUDED.value,
        "updatedAt" = NOW();
      `);
      console.log('โ ุชู ุฅุนุงุฏุฉ ุชุนููู ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ ุงูุงูุชุฑุงุถูุฉ');
      
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅุตูุงุญ ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ:', error.message);
    }
    
    console.log('\n๐ ุชู ุฅุตูุงุญ ูุฎุทุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    
    // ููุฎุต ุงูุฅุตูุงุญุงุช
    console.log('\n๐ ููุฎุต ุงูุฅุตูุงุญุงุช:');
    console.log('  โ ุฅุถุงูุฉ ุนููุฏ isMonitored ุฅูู ุฌุฏูู accounts');
    console.log('  โ ุงูุชุญูู ูู ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ ุงูุฃุฎุฑู');
    console.log('  โ ุฅุตูุงุญ ุฅุนุฏุงุฏุงุช ุงูุดุนุงุฑ');
    console.log('  โ ุงุฎุชุจุงุฑ ุงุณุชุนูุงูุงุช ุงูุญุณุงุจุงุช');
    
    console.log('\n๐ก ุงูุฎุทูุงุช ุงูุชุงููุฉ:');
    console.log('  1. ุฅุนุงุฏุฉ ุชุดุบูู ุงูุฎุงุฏู ุงูุฅูุชุงุฌ');
    console.log('  2. ุงุฎุชุจุงุฑ ุชุญููู ุงูุญุณุงุจุงุช');
    console.log('  3. ุฑูุน ุดุนุงุฑ ุฌุฏูุฏ ุฅุฐุง ูุฒู ุงูุฃูุฑ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุตูุงุญ ูุฎุทุท ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    console.error('ุชูุงุตูู ุงูุฎุทุฃ:', error.message);
  } finally {
    await sequelize.close();
    console.log('\n๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
  }
}

fixProductionSchema();
