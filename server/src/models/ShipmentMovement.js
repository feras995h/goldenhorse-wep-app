import { DataTypes } from 'sequelize';

export default (sequelize) => {
  const ShipmentMovement = sequelize.define('ShipmentMovement', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    shipmentId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'shipments',
        key: 'id'
      }
    },
    trackingNumber: {
      type: DataTypes.STRING(50),
      allowNull: false,
      validate: {
        len: [1, 50]
      }
    },
    type: {
      type: DataTypes.ENUM('status_update', 'location_change', 'delivery_attempt', 'customs_clearance', 'warehouse_release'),
      allowNull: false,
      defaultValue: 'status_update'
    },
    previousStatus: {
      type: DataTypes.ENUM('received_china', 'in_transit', 'customs_clearance', 'out_for_delivery', 'delivered', 'returned'),
      allowNull: true
    },
    newStatus: {
      type: DataTypes.ENUM('received_china', 'in_transit', 'customs_clearance', 'out_for_delivery', 'delivered', 'returned'),
      allowNull: false
    },
    location: {
      type: DataTypes.STRING(200),
      allowNull: false
    },
    date: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW
    },
    notes: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    handledBy: {
      type: DataTypes.STRING(100),
      allowNull: true
    },
    createdBy: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'users',
        key: 'id'
      }
    },
    // Additional fields for warehouse release tracking
    warehouseReleaseOrderId: {
      type: DataTypes.UUID,
      allowNull: true,
      references: {
        model: 'warehouse_release_orders',
        key: 'id'
      }
    },
    isSystemGenerated: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'True if this movement was automatically generated by the system'
    }
  }, {
    tableName: 'shipment_movements',
    timestamps: true,
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    indexes: [
      {
        fields: ['shipmentId']
      },
      {
        fields: ['trackingNumber']
      },
      {
        fields: ['type']
      },
      {
        fields: ['newStatus']
      },
      {
        fields: ['date']
      },
      {
        fields: ['createdBy']
      },
      {
        fields: ['warehouseReleaseOrderId']
      }
    ]
  });

  // Instance methods
  ShipmentMovement.prototype.getStatusText = function() {
    const statusTexts = {
      'received_china': 'تم الاستلام - الصين',
      'in_transit': 'في الطريق',
      'customs_clearance': 'التخليص الجمركي',
      'out_for_delivery': 'خرج للتسليم',
      'delivered': 'تم التسليم',
      'returned': 'مرتجع'
    };
    return statusTexts[this.newStatus] || this.newStatus;
  };

  ShipmentMovement.prototype.getTypeText = function() {
    const typeTexts = {
      'status_update': 'تحديث الحالة',
      'location_change': 'تغيير الموقع',
      'delivery_attempt': 'محاولة تسليم',
      'customs_clearance': 'تخليص جمركي',
      'warehouse_release': 'إذن صرف من المخزن'
    };
    return typeTexts[this.type] || this.type;
  };

  // Class methods
  ShipmentMovement.findByShipment = function(shipmentId) {
    return this.findAll({
      where: { shipmentId },
      order: [['date', 'DESC']]
    });
  };

  ShipmentMovement.findByTrackingNumber = function(trackingNumber) {
    return this.findAll({
      where: { trackingNumber },
      order: [['date', 'DESC']]
    });
  };

  ShipmentMovement.findByStatus = function(status) {
    return this.findAll({
      where: { newStatus: status },
      order: [['date', 'DESC']]
    });
  };

  ShipmentMovement.findRecent = function(limit = 50) {
    return this.findAll({
      order: [['date', 'DESC']],
      limit
    });
  };

  // Associations
  ShipmentMovement.associate = (models) => {
    ShipmentMovement.belongsTo(models.Shipment, { foreignKey: 'shipmentId', as: 'shipment' });
    ShipmentMovement.belongsTo(models.User, { foreignKey: 'createdBy', as: 'creator' });
    ShipmentMovement.belongsTo(models.WarehouseReleaseOrder, { 
      foreignKey: 'warehouseReleaseOrderId', 
      as: 'releaseOrder' 
    });
  };

  return ShipmentMovement;
};
