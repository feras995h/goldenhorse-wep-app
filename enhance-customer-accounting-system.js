import pkg from 'pg';
const { Client } = pkg;

// ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูููุดูุฑุฉ
const dbConfig = {
  connectionString: 'postgres://postgres:XIclgABy2kg3ZZ2Nyh7GOYexxcm206RTNsSAJavhbF4ukgMfDiNqXSOhy8SIALUP@72.60.92.146:5432/postgres'
};

async function enhanceCustomerAccountingSystem() {
  const client = new Client(dbConfig);
  
  try {
    await client.connect();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูููุดูุฑุฉ');

    console.log('\n๐ฆ ุชุทููุฑ ูุธุงู ุฑุจุท ุงูุนููุงุก ุจุงูุญุณุงุจุงุช ุงููุญุงุณุจูุฉ...\n');

    // 1. ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุญุณุงุจ ุงูุฑุฆูุณู "ุงูุนููุงุก" (ุงููุฏูููู)
    console.log('๐ ุงูุชุญูู ูู ุงูุญุณุงุจ ุงูุฑุฆูุณู ููุนููุงุก...');
    
    let customersMainAccount;
    try {
      const existingAccount = await client.query(`
        SELECT id, code, name, level FROM accounts 
        WHERE (name LIKE '%ุนููุงุก%' OR name LIKE '%ูุฏูููู%' OR name LIKE '%Customers%' OR name LIKE '%Receivables%')
        AND type = 'asset'
        ORDER BY level ASC
        LIMIT 1
      `);
      
      if (existingAccount.rows.length > 0) {
        customersMainAccount = existingAccount.rows[0];
        console.log(`โ ุชู ุงูุนุซูุฑ ุนูู ุงูุญุณุงุจ ุงูุฑุฆูุณู: ${customersMainAccount.name} (${customersMainAccount.code})`);
      } else {
        // ุฅูุดุงุก ุงูุญุณุงุจ ุงูุฑุฆูุณู ููุนููุงุก
        const createMainAccountResult = await client.query(`
          INSERT INTO accounts (
            id, code, name, "nameEn", type, "rootType", "reportType",
            level, "isGroup", "isActive", balance, currency, nature, "accountType",
            description, "createdAt", "updatedAt"
          ) VALUES (
            gen_random_uuid(),
            '1201',
            'ุงูุนููุงุก - ุงููุฏูููู',
            'Customers - Accounts Receivable',
            'asset',
            'Asset',
            'Balance Sheet',
            3,
            true,
            true,
            0.00,
            'LYD',
            'debit',
            'group',
            'ุงูุญุณุงุจ ุงูุฑุฆูุณู ูุฌููุน ุญุณุงุจุงุช ุงูุนููุงุก',
            NOW(),
            NOW()
          ) RETURNING id, code, name, level
        `);
        
        customersMainAccount = createMainAccountResult.rows[0];
        console.log(`โ ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุงูุฑุฆูุณู: ${customersMainAccount.name} (${customersMainAccount.code})`);
      }
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุญุณุงุจ ุงูุฑุฆูุณู:', error.message);
      throw error;
    }

    // 2. ุฅูุดุงุก ุฏุงูุฉ ูุฅูุดุงุก ุญุณุงุจ ูุฑุนู ููุนููู ุชููุงุฆูุงู
    console.log('\n๐ง ุฅูุดุงุก ุฏุงูุฉ ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ ููุนููุงุก...');
    
    const createCustomerAccountFunction = `
      CREATE OR REPLACE FUNCTION create_customer_account()
      RETURNS TRIGGER AS $$
      DECLARE
        account_id UUID;
        account_code VARCHAR(50);
        customers_main_account_id UUID := '${customersMainAccount.id}';
      BEGIN
        -- ุงูุชุญูู ูู ูุฌูุฏ ุงูุญุณุงุจ ุงูุฑุฆูุณู ููุนููุงุก
        IF customers_main_account_id IS NULL THEN
          SELECT id INTO customers_main_account_id 
          FROM accounts 
          WHERE (name LIKE '%ุนููุงุก%' OR name LIKE '%ูุฏูููู%' OR name LIKE '%Customers%')
          AND type = 'asset' AND "isGroup" = true
          LIMIT 1;
        END IF;

        -- ุฅูุดุงุก ููุฏ ุงูุญุณุงุจ ุงููุฑุนู
        account_code := '1201' || LPAD(EXTRACT(EPOCH FROM NOW())::TEXT, 10, '0');

        -- ุฅูุดุงุก ุงูุญุณุงุจ ุงููุฑุนู ููุนููู
        INSERT INTO accounts (
          id, code, name, "nameEn", type, "rootType", "reportType",
          "parentId", level, "isGroup", "isActive", balance, currency, nature, "accountType",
          description, "createdAt", "updatedAt"
        ) VALUES (
          gen_random_uuid(),
          account_code,
          NEW.name,
          NEW."nameEn",
          'asset',
          'Asset',
          'Balance Sheet',
          customers_main_account_id,
          4,
          false,
          true,
          0.00,
          COALESCE(NEW.currency, 'LYD'),
          'debit',
          'sub',
          'ุญุณุงุจ ุงูุนููู: ' || NEW.name,
          NOW(),
          NOW()
        ) RETURNING id INTO account_id;

        -- ุฑุจุท ุงูุนููู ุจุงูุญุณุงุจ
        NEW."accountId" = account_id;

        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `;

    try {
      await client.query(createCustomerAccountFunction);
      console.log('โ ุชู ุฅูุดุงุก ุฏุงูุฉ ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฏุงูุฉ:', error.message);
    }

    // 3. ุฅูุดุงุก Trigger ูุชุดุบูู ุงูุฏุงูุฉ ุนูุฏ ุฅูุดุงุก ุนููู ุฌุฏูุฏ
    console.log('\nโก ุฅูุดุงุก Trigger ูุฅูุดุงุก ุงูุญุณุงุจุงุช ุชููุงุฆูุงู...');
    
    const createTrigger = `
      DROP TRIGGER IF EXISTS customer_account_trigger ON customers;
      
      CREATE TRIGGER customer_account_trigger
        BEFORE INSERT ON customers
        FOR EACH ROW
        EXECUTE FUNCTION create_customer_account();
    `;

    try {
      await client.query(createTrigger);
      console.log('โ ุชู ุฅูุดุงุก Trigger ูุฅูุดุงุก ุงูุญุณุงุจุงุช ุชููุงุฆูุงู');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก Trigger:', error.message);
    }

    // 4. ุฅูุดุงุก ุญุณุงุจุงุช ููุนููุงุก ุงูููุฌูุฏูู ุงูุฐูู ูุง ูููููู ุญุณุงุจุงุช
    console.log('\n๐ฅ ุฅูุดุงุก ุญุณุงุจุงุช ููุนููุงุก ุงูููุฌูุฏูู...');
    
    try {
      const customersWithoutAccounts = await client.query(`
        SELECT c.id, c.name, c."nameEn", c.currency, c.code as customer_code
        FROM customers c
        LEFT JOIN accounts a ON c."accountId" = a.id
        WHERE c."accountId" IS NULL OR a.id IS NULL
      `);

      console.log(`๐ ุนุฏุฏ ุงูุนููุงุก ุจุฏูู ุญุณุงุจุงุช: ${customersWithoutAccounts.rows.length}`);

      for (const customer of customersWithoutAccounts.rows) {
        try {
          // ุฅูุดุงุก ููุฏ ุญุณุงุจ ูุฑูุฏ
          const accountCode = '1201' + String(Date.now() + Math.random()).slice(-6);
          
          // ุฅูุดุงุก ุงูุญุณุงุจ
          const accountResult = await client.query(`
            INSERT INTO accounts (
              id, code, name, "nameEn", type, "rootType", "reportType",
              "parentId", level, "isGroup", "isActive", balance, currency, nature, "accountType",
              description, "createdAt", "updatedAt"
            ) VALUES (
              gen_random_uuid(),
              $1,
              $2,
              $3,
              'asset',
              'Asset',
              'Balance Sheet',
              $4,
              4,
              false,
              true,
              0.00,
              $5,
              'debit',
              'sub',
              'ุญุณุงุจ ุงูุนููู: ' || $2,
              NOW(),
              NOW()
            ) RETURNING id
          `, [accountCode, customer.name, customer.nameen, customersMainAccount.id, customer.currency || 'LYD']);

          const accountId = accountResult.rows[0].id;

          // ุฑุจุท ุงูุนููู ุจุงูุญุณุงุจ
          await client.query(`
            UPDATE customers 
            SET "accountId" = $1, "updatedAt" = NOW()
            WHERE id = $2
          `, [accountId, customer.id]);

          console.log(`โ ุชู ุฅูุดุงุก ุญุณุงุจ ููุนููู: ${customer.name}`);
        } catch (error) {
          console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุญุณุงุจ ููุนููู ${customer.name}:`, error.message);
        }
      }
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุญุณุงุจุงุช ุงูุนููุงุก ุงูููุฌูุฏูู:', error.message);
    }

    // 5. ุฅูุดุงุก ุฏุงูุฉ ูุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ุนูุฏ ุฅูุดุงุก ูุงุชูุฑุฉ
    console.log('\n๐ฐ ุฅูุดุงุก ุฏุงูุฉ ุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ุนูุฏ ุงูููุงุชูุฑ...');
    
    const updateCustomerBalanceFunction = `
      CREATE OR REPLACE FUNCTION update_customer_balance_on_invoice()
      RETURNS TRIGGER AS $$
      DECLARE
        customer_account_id UUID;
      BEGIN
        -- ุงูุญุตูู ุนูู ูุนุฑู ุญุณุงุจ ุงูุนููู
        SELECT "accountId" INTO customer_account_id
        FROM customers
        WHERE id = NEW."customerId";

        -- ุชุญุฏูุซ ุฑุตูุฏ ุญุณุงุจ ุงูุนููู (ูุฏูู)
        IF customer_account_id IS NOT NULL THEN
          UPDATE accounts
          SET balance = balance + NEW."totalAmount",
              "updatedAt" = NOW()
          WHERE id = customer_account_id;

          -- ุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ูู ุฌุฏูู ุงูุนููุงุก
          UPDATE customers
          SET balance = balance + NEW."totalAmount",
              "updatedAt" = NOW()
          WHERE id = NEW."customerId";
        END IF;

        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `;

    try {
      await client.query(updateCustomerBalanceFunction);
      console.log('โ ุชู ุฅูุดุงุก ุฏุงูุฉ ุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ุนูุฏ ุงูููุงุชูุฑ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุฏุงูุฉ ุชุญุฏูุซ ุงูุฑุตูุฏ:', error.message);
    }

    // 6. ุฅูุดุงุก Trigger ูุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ุนูุฏ ุฅูุดุงุก ูุงุชูุฑุฉ
    console.log('\nโก ุฅูุดุงุก Trigger ูุชุญุฏูุซ ุงูุฑุตูุฏ ุนูุฏ ุงูููุงุชูุฑ...');
    
    const invoiceBalanceTrigger = `
      DROP TRIGGER IF EXISTS invoice_customer_balance_trigger ON sales_invoices;
      
      CREATE TRIGGER invoice_customer_balance_trigger
        AFTER INSERT ON sales_invoices
        FOR EACH ROW
        EXECUTE FUNCTION update_customer_balance_on_invoice();
    `;

    try {
      await client.query(invoiceBalanceTrigger);
      console.log('โ ุชู ุฅูุดุงุก Trigger ูุชุญุฏูุซ ุงูุฑุตูุฏ ุนูุฏ ุงูููุงุชูุฑ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก Trigger ููููุงุชูุฑ:', error.message);
    }

    // 7. ุงุฎุชุจุงุฑ ุงููุธุงู
    console.log('\n๐งช ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุทูุฑ...');
    
    try {
      // ุงูุชุญูู ูู ุงูุนููุงุก ูุญุณุงุจุงุชูู
      const customersWithAccounts = await client.query(`
        SELECT 
          c.id as customer_id,
          c.name as customer_name,
          c.balance as customer_balance,
          a.id as account_id,
          a.code as account_code,
          a.name as account_name,
          a.balance as account_balance
        FROM customers c
        LEFT JOIN accounts a ON c."accountId" = a.id
        ORDER BY c.name
        LIMIT 10
      `);

      console.log('\n๐ ุนููุฉ ูู ุงูุนููุงุก ูุญุณุงุจุงุชูู:');
      for (const row of customersWithAccounts.rows) {
        console.log(`- ${row.customer_name}: ุญุณุงุจ ${row.account_code} (ุฑุตูุฏ: ${row.account_balance || 0})`);
      }

      // ุงูุชุญูู ูู ุงูุญุณุงุจ ุงูุฑุฆูุณู
      const mainAccountBalance = await client.query(`
        SELECT 
          a.name,
          a.code,
          a.balance,
          COUNT(sub.id) as sub_accounts_count,
          SUM(sub.balance) as total_sub_balance
        FROM accounts a
        LEFT JOIN accounts sub ON sub."parentId" = a.id
        WHERE a.id = $1
        GROUP BY a.id, a.name, a.code, a.balance
      `, [customersMainAccount.id]);

      if (mainAccountBalance.rows.length > 0) {
        const main = mainAccountBalance.rows[0];
        console.log(`\n๐ฆ ุงูุญุณุงุจ ุงูุฑุฆูุณู: ${main.name} (${main.code})`);
        console.log(`๐ ุนุฏุฏ ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ: ${main.sub_accounts_count}`);
        console.log(`๐ฐ ุฅุฌูุงูู ุฃุฑุตุฏุฉ ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ: ${main.total_sub_balance || 0}`);
      }

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงููุธุงู:', error.message);
    }

    console.log('\n๐ ุชู ุชุทููุฑ ูุธุงู ุฑุจุท ุงูุนููุงุก ุจุงูุญุณุงุจุงุช ุงููุญุงุณุจูุฉ ุจูุฌุงุญ!');
    
    console.log('\n๐ ููุฎุต ุงูุชุทููุฑุงุช:');
    console.log('โ ุชู ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุญุณุงุจ ุงูุฑุฆูุณู "ุงูุนููุงุก"');
    console.log('โ ุชู ุฅูุดุงุก ุฏุงูุฉ ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ ุชููุงุฆูุงู');
    console.log('โ ุชู ุฅูุดุงุก Trigger ูุฅูุดุงุก ุงูุญุณุงุจุงุช ุนูุฏ ุฅุถุงูุฉ ุนููู ุฌุฏูุฏ');
    console.log('โ ุชู ุฅูุดุงุก ุญุณุงุจุงุช ููุนููุงุก ุงูููุฌูุฏูู');
    console.log('โ ุชู ุฅูุดุงุก ุฏุงูุฉ ุชุญุฏูุซ ุฑุตูุฏ ุงูุนููู ุนูุฏ ุงูููุงุชูุฑ');
    console.log('โ ุชู ุฅูุดุงุก Trigger ูุชุญุฏูุซ ุงูุฑุตูุฏ ุชููุงุฆูุงู');
    
    console.log('\n๐ก ููู ูุนูู ุงููุธุงู ุงูุขู:');
    console.log('1. ุนูุฏ ุฅุถุงูุฉ ุนููู ุฌุฏูุฏ โ ููุดุฃ ูู ุญุณุงุจ ูุฑุนู ุชููุงุฆูุงู ุชุญุช "ุงูุนููุงุก"');
    console.log('2. ุนูุฏ ุฅุตุฏุงุฑ ูุงุชูุฑุฉ ูุจูุนุงุช โ ูุณุฌู ุงูุนููู ูุฏูู (ูุฏููู ูู)');
    console.log('3. ุนูุฏ ุงุณุชูุงู ุฏูุนุฉ โ ูุณุฌู ุงูุนููู ุฏุงุฆู (ุณุฏุฏ ุฌุฒุก ูู ุงูุฏูู)');
    console.log('4. ูู ูุดู ุงูุญุณุงุจ โ ุชุธูุฑ ุฌููุน ุงูุญุฑูุงุช ูุงูุฑุตูุฏ ุงูุตุงูู');
    console.log('5. ูู ููุฒุงู ุงููุฑุงุฌุนุฉ โ ูุธูุฑ ูุฌููุน ุญุณุงุจุงุช ุงูุนููุงุก ุชุญุช ุงูุฃุตูู');

  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// ุชุดุบูู ุงูุณูุฑููพุช
enhanceCustomerAccountingSystem().catch(console.error);
