import sqlite3 from 'sqlite3';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ูุณุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
const dbPath = join(__dirname, 'database', 'development.sqlite');

function checkAccounts() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', err.message);
        reject(err);
        return;
      }
      console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    });

    // ุงูุชุญูู ูู ูุฌูุฏ ุฌุฏูู ุงูุญุณุงุจุงุช
    db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='accounts'", (err, row) => {
      if (err) {
        console.error('โ ุฎุทุฃ ูู ุงูุชุญูู ูู ุฌุฏูู ุงูุญุณุงุจุงุช:', err.message);
        reject(err);
        return;
      }

      if (!row) {
        console.log('โ ุฌุฏูู ุงูุญุณุงุจุงุช ุบูุฑ ููุฌูุฏ');
        db.close();
        resolve();
        return;
      }

      console.log('โ ุฌุฏูู ุงูุญุณุงุจุงุช ููุฌูุฏ');

      // ุงูุญุตูู ุนูู ุงูุญุณุงุจุงุช ุงูุฑุฆูุณูุฉ
      db.all(`
        SELECT code, name, type, nature, level, isGroup, balance 
        FROM accounts 
        WHERE level = 1 OR parentId IS NULL 
        ORDER BY code
      `, (err, rows) => {
        if (err) {
          console.error('โ ุฎุทุฃ ูู ุงุณุชุนูุงู ุงูุญุณุงุจุงุช:', err.message);
          reject(err);
          return;
        }

        console.log('\n๐ ุงูุญุณุงุจุงุช ุงูุฑุฆูุณูุฉ ุงูุญุงููุฉ:');
        console.log('=====================================');

        if (rows.length === 0) {
          console.log('โ ูุง ุชูุฌุฏ ุญุณุงุจุงุช ุฑุฆูุณูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
        } else {
          rows.forEach(account => {
            console.log(`${account.code} - ${account.name}`);
            console.log(`  ุงูููุน: ${account.type || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`  ุงูุทุจูุนุฉ: ${account.nature || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`  ุงููุณุชูู: ${account.level || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`  ูุฌููุนุฉ: ${account.isGroup ? 'ูุนู' : 'ูุง'}`);
            console.log(`  ุงูุฑุตูุฏ: ${account.balance || 0}`);
            console.log('');
          });
        }

        // ุฅุญุตุงุฆูุงุช ุฅุถุงููุฉ
        db.get("SELECT COUNT(*) as total FROM accounts", (err, totalRow) => {
          if (err) {
            console.error('โ ุฎุทุฃ ูู ุญุณุงุจ ุฅุฌูุงูู ุงูุญุณุงุจุงุช:', err.message);
            reject(err);
            return;
          }

          console.log(`๐ ุฅุฌูุงูู ุงูุญุณุงุจุงุช: ${totalRow.total}`);

          // ุชูุฒูุน ุงูุญุณุงุจุงุช ุญุณุจ ุงูููุน
          db.all(`
            SELECT type, COUNT(*) as count 
            FROM accounts 
            WHERE type IS NOT NULL 
            GROUP BY type 
            ORDER BY type
          `, (err, typeRows) => {
            if (err) {
              console.error('โ ุฎุทุฃ ูู ุญุณุงุจ ุชูุฒูุน ุงูุญุณุงุจุงุช:', err.message);
              reject(err);
              return;
            }

            console.log('\nุชูุฒูุน ุงูุญุณุงุจุงุช ุญุณุจ ุงูููุน:');
            typeRows.forEach(row => {
              console.log(`- ${row.type}: ${row.count} ุญุณุงุจ`);
            });

            console.log('\n๐ฏ ุงูุชุตููู ุงููุทููุจ:');
            console.log('===================');
            console.log('1 - ุงูุฃุตูู (Assets) - ุทุจูุนุฉ ูุฏูู');
            console.log('2 - ุงููุตุฑููุงุช (Expenses) - ุทุจูุนุฉ ูุฏูู');
            console.log('3 - ุงูุงูุชุฒุงูุงุช (Liabilities) - ุทุจูุนุฉ ุฏุงุฆู');
            console.log('4 - ุญููู ุงูููููุฉ (Equity) - ุทุจูุนุฉ ุฏุงุฆู');
            console.log('5 - ุงูุฅูุฑุงุฏุงุช (Revenue) - ุทุจูุนุฉ ุฏุงุฆู');

            console.log('\nโ ุชู ุงูุงูุชูุงุก ูู ุงูุชุญูู');

            db.close((err) => {
              if (err) {
                console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', err.message);
                reject(err);
              } else {
                console.log('โ ุชู ุฅุบูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
                resolve();
              }
            });
          });
        });
      });
    });
  });
}

// ุชุดุบูู ุงูุณูุฑูุจุช
if (import.meta.url === `file://${process.argv[1]}`) {
  checkAccounts()
    .then(() => {
      console.log('โ ุชู ุชุดุบูู ุงูุณูุฑูุจุช ุจูุฌุงุญ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('โ ูุดู ูู ุชุดุบูู ุงูุณูุฑูุจุช:', error);
      process.exit(1);
    });
}
