import { Sequelize } from 'sequelize';

const DATABASE_URL = 'postgres://postgres:XIclgABy2kg3ZZ2Nyh7GOYexxcm206RTNsSAJavhbF4ukgMfDiNqXSOhy8SIALUP@72.60.92.146:5432/postgres';

async function fixCategoriesProperly() {
  let sequelize;
  
  try {
    console.log('๐ง ุฅุตูุงุญ ูุดููุฉ ุงููุฆุงุช ุจุทุฑููุฉ ุตุญูุญุฉ...');
    console.log('๐ ุงูุชุงุฑูุฎ:', new Date().toLocaleString('ar-EG'));
    console.log('='.repeat(60));
    
    sequelize = new Sequelize(DATABASE_URL, {
      dialect: 'postgres',
      logging: false,
      pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
      }
    });
    
    await sequelize.authenticate();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    
    // 1. ุงูุชุญูู ูู ูููู ุฏููู ุงูุญุณุงุจุงุช
    console.log('\n1๏ธโฃ ุงูุชุญูู ูู ูููู ุฏููู ุงูุญุณุงุจุงุช...');
    
    const [accountsStructure] = await sequelize.query(`
      SELECT code, name, type, level, "isGroup", "isActive"
      FROM accounts 
      WHERE type = 'asset' 
      ORDER BY code
    `);
    
    console.log(`๐ ุฅุฌูุงูู ุญุณุงุจุงุช ุงูุฃุตูู: ${accountsStructure.length}`);
    
    // 2. ุงูุจุญุซ ุนู ูุฌููุนุฉ ุงูุฃุตูู ุงูุซุงุจุชุฉ
    console.log('\n2๏ธโฃ ุงูุจุญุซ ุนู ูุฌููุนุฉ ุงูุฃุตูู ุงูุซุงุจุชุฉ...');
    
    const [fixedAssetsParent] = await sequelize.query(`
      SELECT id, code, name, "nameEn", type, level, "parentId", "isActive"
      FROM accounts 
      WHERE code = '1.2' AND type = 'asset'
    `);
    
    if (fixedAssetsParent.length === 0) {
      console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฌููุนุฉ ุงูุฃุตูู ุงูุซุงุจุชุฉ!');
      return;
    }
    
    const parent = fixedAssetsParent[0];
    console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุงููุฌููุนุฉ:', parent.name, `(ID: ${parent.id})`);
    
    // 3. ุงูุจุญุซ ุนู ุงููุฆุงุช ุงูููุฌูุฏุฉ
    console.log('\n3๏ธโฃ ุงูุจุญุซ ุนู ุงููุฆุงุช ุงูููุฌูุฏุฉ...');
    
    const [existingCategories] = await sequelize.query(`
      SELECT id, code, name, "nameEn", type, level, "parentId", "isActive", "isGroup"
      FROM accounts 
      WHERE "parentId" = :parentId AND type = 'asset'
      ORDER BY code
    `, {
      replacements: { parentId: parent.id }
    });
    
    console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ${existingCategories.length} ุญุณุงุจ ุชุญุช ุงูุฃุตูู ุงูุซุงุจุชุฉ:`);
    existingCategories.forEach((cat, index) => {
      const status = cat.isActive ? 'โ' : 'โ';
      const type = cat.isGroup ? '(ูุฌููุนุฉ)' : '(ูุฆุฉ)';
      console.log(`   ${index + 1}. ${status} ${cat.code} - ${cat.name} ${type}`);
    });
    
    // 4. ุชุตููู ุงูุญุณุงุจุงุช
    console.log('\n4๏ธโฃ ุชุตููู ุงูุญุณุงุจุงุช...');
    
    const groups = existingCategories.filter(acc => acc.isGroup);
    const categories = existingCategories.filter(acc => !acc.isGroup && acc.isActive);
    
    console.log(`๐ ุงููุฌููุนุงุช: ${groups.length}`);
    groups.forEach(group => {
      console.log(`   - ${group.code} - ${group.name}`);
    });
    
    console.log(`๐ ุงููุฆุงุช: ${categories.length}`);
    categories.forEach(category => {
      console.log(`   - ${category.code} - ${category.name}`);
    });
    
    // 5. ุฅูุดุงุก ูุฆุงุช ููุงุณุจุฉ ููุฃุตูู ุงูุซุงุจุชุฉ
    console.log('\n5๏ธโฃ ุฅูุดุงุก ูุฆุงุช ููุงุณุจุฉ ููุฃุตูู ุงูุซุงุจุชุฉ...');
    
    const suitableCategories = categories.filter(cat => 
      !cat.name.includes('ูุฌูุน') && 
      !cat.name.includes('ุฅููุงู') &&
      cat.code !== '1.2.7' // ุงุณุชุจุนุงุฏ ูุฌูุน ุงูุฅููุงู
    );
    
    console.log(`๐ฏ ุงููุฆุงุช ุงูููุงุณุจุฉ ููุฃุตูู ุงูุซุงุจุชุฉ: ${suitableCategories.length}`);
    suitableCategories.forEach((cat, index) => {
      console.log(`   ${index + 1}. ${cat.code} - ${cat.name} (ID: ${cat.id})`);
    });
    
    // 6. ุฅูุดุงุก API endpoint ุตุญูุญ
    console.log('\n6๏ธโฃ ุฅูุดุงุก API endpoint ุตุญูุญ...');
    
    const apiCode = `
// API endpoint ุตุญูุญ ูููุฆุงุช - ูุชุนุงูู ูุน ุฏููู ุงูุญุณุงุจุงุช
router.get('/fixed-assets/categories', authenticateToken, requireFinancialAccess, async (req, res) => {
  try {
    console.log('๐ Fetching fixed asset categories...');
    
    // ุงูุจุญุซ ุนู ูุฌููุนุฉ ุงูุฃุตูู ุงูุซุงุจุชุฉ
    const fixedAssetsParent = await Account.findOne({
      where: {
        code: '1.2',
        type: 'asset'
      }
    });
    
    if (!fixedAssetsParent) {
      return res.status(500).json({
        success: false,
        message: 'ูุฌููุนุฉ ุงูุฃุตูู ุงูุซุงุจุชุฉ ุบูุฑ ููุฌูุฏุฉ'
      });
    }
    
    // ุงูุจุญุซ ุนู ุงููุฆุงุช ุงูููุงุณุจุฉ (ุบูุฑ ุงููุฌููุนุงุช ูููุณ ูุฌูุน ุงูุฅููุงู)
    const categories = await Account.findAll({
      where: {
        parentId: fixedAssetsParent.id,
        type: 'asset',
        isActive: true,
        isGroup: false,
        name: {
          [Op.notLike]: '%ูุฌูุน%'
        }
      },
      attributes: ['id', 'code', 'name', 'nameEn', 'type', 'level', 'parentId'],
      order: [['code', 'ASC']]
    });
    
    console.log(\`โ Found \${categories.length} fixed asset categories\`);
    
    res.json({
      success: true,
      data: categories,
      total: categories.length
    });
    
  } catch (error) {
    console.error('โ Error fetching fixed asset categories:', error);
    res.status(500).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุฌูุจ ูุฆุงุช ุงูุฃุตูู ุงูุซุงุจุชุฉ',
      error: process.env.NODE_ENV === 'development' ? error.message : 'ุฎุทุฃ ุฏุงุฎูู'
    });
  }
});
`;
    
    // ุญูุธ ุงูููุฏ ูู ููู
    const fs = await import('fs');
    fs.writeFileSync('fixed-categories-api.js', apiCode);
    console.log('โ ุชู ุญูุธ API endpoint ุงูุตุญูุญ ูู ููู fixed-categories-api.js');
    
    // 7. ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงู ุงูุฌุฏูุฏ
    console.log('\n7๏ธโฃ ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงู ุงูุฌุฏูุฏ...');
    
    const [testCategories] = await sequelize.query(`
      SELECT id, code, name, "nameEn", type, level, "parentId"
      FROM accounts 
      WHERE "parentId" = :parentId 
      AND type = 'asset' 
      AND "isActive" = true 
      AND "isGroup" = false
      AND name NOT LIKE '%ูุฌูุน%'
      ORDER BY code
    `, {
      replacements: { parentId: parent.id }
    });
    
    console.log(`๐ ุงููุฆุงุช ุงูููุงุณุจุฉ: ${testCategories.length}`);
    testCategories.forEach((cat, index) => {
      console.log(`   ${index + 1}. ${cat.code} - ${cat.name} (ID: ${cat.id})`);
    });
    
    console.log('\n๐ ุชู ุฅุตูุงุญ ุงููุดููุฉ ุจุทุฑููุฉ ุตุญูุญุฉ!');
    console.log('๐ก ูุฐุง ุงูุญู ูุญุงูุธ ุนูู ุฏููู ุงูุญุณุงุจุงุช ููุนุทู ุงููุฆุงุช ุงูููุงุณุจุฉ ููุท');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุฅุตูุงุญ:', error.message);
    console.error('๐ ุงูุชูุงุตูู:', error);
  } finally {
    if (sequelize) {
      await sequelize.close();
      console.log('\n๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
  }
}

// ุชุดุบูู ุงูุฅุตูุงุญ
fixCategoriesProperly();
