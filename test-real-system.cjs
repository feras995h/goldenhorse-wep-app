const { Sequelize } = require('sequelize');

async function testRealSystem() {
  console.log('๐ง ุงุฎุชุจุงุฑ ุงููุธุงู ุงูุญูููู...\n');

  // 1. ุงุฎุชุจุงุฑ ุงููููุงุช ุงููุทููุจุฉ
  console.log('1๏ธโฃ ุงุฎุชุจุงุฑ ุงููููุงุช ุงููุทููุจุฉ...');
  
  const fs = require('fs');
  const path = require('path');

  const requiredFiles = [
    'server/src/server.js',
    'server/src/routes/financial.js',
    'server/src/routes/sales.js',
    'server/src/routes/auth.js',
    'server/src/models/index.js'
  ];

  const missingFiles = [];
  requiredFiles.forEach(file => {
    const fullPath = path.join(__dirname, file);
    if (!fs.existsSync(fullPath)) {
      missingFiles.push(file);
    }
  });

  if (missingFiles.length === 0) {
    console.log('โ ุฌููุน ุงููููุงุช ุงููุทููุจุฉ ููุฌูุฏุฉ');
  } else {
    console.log('โ ูููุงุช ููููุฏุฉ:', missingFiles);
  }

  // 2. ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
  console.log('\n2๏ธโฃ ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
  try {
    const sequelize = new Sequelize('postgres://postgres:password@localhost:5432/accounting_system');
    await sequelize.authenticate();
    console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุชุตูุฉ ุจูุฌุงุญ');
    await sequelize.close();
  } catch (error) {
    console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุบูุฑ ูุชุตูุฉ:', error.message);
    console.log('๐ก ุชุฃูุฏ ูู ุชุดุบูู PostgreSQL');
  }

  // 3. ุงุฎุชุจุงุฑ ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ
  console.log('\n3๏ธโฃ ุงุฎุชุจุงุฑ ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ...');
  
  const requiredEnvVars = [
    'DATABASE_URL',
    'JWT_SECRET',
    'JWT_REFRESH_SECRET',
    'CORS_ORIGIN'
  ];

  const missingEnvVars = [];
  requiredEnvVars.forEach(envVar => {
    if (!process.env[envVar]) {
      missingEnvVars.push(envVar);
    }
  });

  if (missingEnvVars.length === 0) {
    console.log('โ ุฌููุน ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ููุฌูุฏุฉ');
  } else {
    console.log('โ ูุชุบูุฑุงุช ุจูุฆูุฉ ููููุฏุฉ:', missingEnvVars);
  }

  // 4. ุงูุชุญูู ูู ุฅุฒุงูุฉ Mock
  console.log('\n4๏ธโฃ ุงูุชุญูู ูู ุฅุฒุงูุฉ Mock...');
  
  const mockFiles = [
    'server/src/server-no-db.js',
    'server/src/server-simple.js',
    'server/src/server-no-redis.js',
    'server/src/server-enhanced.js',
    'server/src/server-updated.js',
    'server/src/server-fixed.js',
    'server/src/server-working.js',
    'server/src/server-database.js'
  ];

  const existingMockFiles = [];
  mockFiles.forEach(file => {
    const fullPath = path.join(__dirname, file);
    if (fs.existsSync(fullPath)) {
      existingMockFiles.push(file);
    }
  });

  if (existingMockFiles.length === 0) {
    console.log('โ ุชู ุฅุฒุงูุฉ ุฌููุน ูููุงุช Mock');
  } else {
    console.log('โ ูููุงุช Mock ูุง ุชุฒุงู ููุฌูุฏุฉ:', existingMockFiles);
  }

  // 5. ุงุฎุชุจุงุฑ package.json
  console.log('\n5๏ธโฃ ุงุฎุชุจุงุฑ package.json...');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'server/package.json'), 'utf8'));
    const mockScripts = Object.keys(packageJson.scripts).filter(script => 
      script.includes('mock') || script.includes('simple') || script.includes('no-redis') || 
      script.includes('enhanced') || script.includes('updated') || script.includes('fixed') || 
      script.includes('working') || script.includes('database')
    );

    if (mockScripts.length === 0) {
      console.log('โ ุชู ุฅุฒุงูุฉ ุฌููุน scripts Mock ูู package.json');
    } else {
      console.log('โ scripts Mock ูุง ุชุฒุงู ููุฌูุฏุฉ:', mockScripts);
    }
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ูุฑุงุกุฉ package.json:', error.message);
  }

  // 6. ููุฎุต ุงููุชุงุฆุฌ
  console.log('\n๐ฏ ููุฎุต ุงููุชุงุฆุฌ:');
  
  if (missingFiles.length === 0 && existingMockFiles.length === 0) {
    console.log('โ ุงููุธุงู ุฌุงูุฒ ููุงุณุชุฎุฏุงู ุงูุญูููู');
    console.log('โ ุฌููุน ูููุงุช Mock ุชู ุฅุฒุงูุชูุง');
    console.log('โ ุงููุธุงู ูุนุชูุฏ ุนูู ุงููุธุงุฆู ุงูุญููููุฉ ููุท');
    
    console.log('\n๐ ููููู ุงูุขู ุชุดุบูู ุงููุธุงู:');
    console.log('   cd server');
    console.log('   npm run dev');
    console.log('   ุฃู');
    console.log('   npm start');
    
    console.log('\n๐ ุงููุชุทูุจุงุช:');
    console.log('   - PostgreSQL ูุฌุจ ุฃู ูููู ูุดุบูุงู');
    console.log('   - ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ูุฌุจ ุฃู ุชููู ูุญุฏุฏุฉ');
    console.log('   - ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฌุจ ุฃู ุชููู ูููุฃุฉ');
    
  } else {
    console.log('โ ุงููุธุงู ูุญุชุงุฌ ุฅูู ุฅุตูุงุญุงุช ุฅุถุงููุฉ');
    if (missingFiles.length > 0) {
      console.log('   - ูููุงุช ููููุฏุฉ:', missingFiles);
    }
    if (existingMockFiles.length > 0) {
      console.log('   - ูููุงุช Mock ูุง ุชุฒุงู ููุฌูุฏุฉ:', existingMockFiles);
    }
  }

  console.log('\nโจ ุงููุธุงู ุงูุขู ูุนุชูุฏ ุนูู ุงููุธุงุฆู ุงูุญููููุฉ ููุท!');
}

testRealSystem().catch(console.error);
