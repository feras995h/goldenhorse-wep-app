import { Sequelize, DataTypes, Op } from 'sequelize';

/**
 * ÿ•ÿµŸÑÿßÿ≠ ÿ¥ÿßŸÖŸÑ ŸÑŸÖÿ¥ÿßŸÉŸÑ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
 * Complete Sales Dashboard Fix Script
 */

console.log('üîß ÿ®ÿØÿ° ÿ•ÿµŸÑÿßÿ≠ ŸÖÿ¥ÿßŸÉŸÑ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...\n');

// ÿ•ÿπÿØÿßÿØ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
const DATABASE_URL = 'postgres://postgres:XIclgABy2kg3ZZ2Nyh7GOYexxcm206RTNsSAJavhbF4ukgMfDiNqXSOhy8SIALUP@72.60.92.146:5432/golden-horse-shipping';

const sequelize = new Sequelize(DATABASE_URL, {
  dialect: 'postgres',
  logging: false,
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  }
});

async function fixSalesDashboard() {
  try {
    console.log('üìä ŸÅÿ≠ÿµ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™...');
    await sequelize.authenticate();
    console.log('‚úÖ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßÿ¨ÿ≠\n');

    // 1. ÿ•ÿµŸÑÿßÿ≠ ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°
    console.log('üë• ÿ•ÿµŸÑÿßÿ≠ ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°...');
    
    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°
    const customersTableExists = await sequelize.query(
      "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'customers')",
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (!customersTableExists[0].exists) {
      console.log('üìã ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°...');
      await sequelize.query(`
        CREATE TABLE customers (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          code VARCHAR(20) UNIQUE NOT NULL,
          name VARCHAR(100) NOT NULL,
          phone VARCHAR(20),
          email VARCHAR(100),
          address TEXT,
          balance DECIMAL(15,2) DEFAULT 0,
          "isActive" BOOLEAN DEFAULT true,
          category VARCHAR(50) DEFAULT 'wholesale',
          "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      console.log('‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°');
    } else {
      console.log('‚úÖ ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸÖŸàÿ¨ŸàÿØ');
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿπŸÖŸàÿØ isActive
      const hasIsActive = await sequelize.query(
        "SELECT column_name FROM information_schema.columns WHERE table_name = 'customers' AND column_name = 'isActive'",
        { type: sequelize.QueryTypes.SELECT }
      );
      
      if (hasIsActive.length === 0) {
        console.log('üìã ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ isActive ŸÑÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°...');
        await sequelize.query('ALTER TABLE customers ADD COLUMN "isActive" BOOLEAN DEFAULT true');
        console.log('‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ isActive');
      }
    }

    // 2. ÿ•ÿµŸÑÿßÿ≠ ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
    console.log('\nüìÑ ÿ•ÿµŸÑÿßÿ≠ ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...');
    
    const salesInvoicesTableExists = await sequelize.query(
      "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'sales_invoices')",
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (!salesInvoicesTableExists[0].exists) {
      console.log('üìã ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...');
      await sequelize.query(`
        CREATE TABLE sales_invoices (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          "invoiceNumber" VARCHAR(50) UNIQUE NOT NULL,
          "customerId" UUID REFERENCES customers(id),
          date DATE DEFAULT CURRENT_DATE,
          "dueDate" DATE,
          "totalAmount" DECIMAL(15,2) DEFAULT 0,
          "paidAmount" DECIMAL(15,2) DEFAULT 0,
          status VARCHAR(20) DEFAULT 'pending',
          notes TEXT,
          "isActive" BOOLEAN DEFAULT true,
          "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      console.log('‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™');
    } else {
      console.log('‚úÖ ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸÖŸàÿ¨ŸàÿØ');
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿπŸÖŸàÿØ isActive
      const hasIsActive = await sequelize.query(
        "SELECT column_name FROM information_schema.columns WHERE table_name = 'sales_invoices' AND column_name = 'isActive'",
        { type: sequelize.QueryTypes.SELECT }
      );
      
      if (hasIsActive.length === 0) {
        console.log('üìã ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ isActive ŸÑÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...');
        await sequelize.query('ALTER TABLE sales_invoices ADD COLUMN "isActive" BOOLEAN DEFAULT true');
        console.log('‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ isActive');
      }
    }

    // 3. ÿ•ÿ∂ÿßŸÅÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÑÿπŸÖŸÑÿßÿ°
    console.log('\nüë• ÿ•ÿ∂ÿßŸÅÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÑÿπŸÖŸÑÿßÿ°...');
    
    const customersCount = await sequelize.query(
      'SELECT COUNT(*) as count FROM customers',
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (parseInt(customersCount[0].count) === 0) {
      const testCustomers = [
        {
          code: 'CUST001',
          name: 'ÿ¥ÿ±ŸÉÿ© ÿßŸÑÿ∞Ÿáÿ®Ÿä ŸÑŸÑÿ™ÿ¨ÿßÿ±ÿ©',
          phone: '0912345678',
          email: 'golden@company.ly',
          address: 'ÿ∑ÿ±ÿßÿ®ŸÑÿ≥ - ÿ¥ÿßÿ±ÿπ ÿßŸÑÿ¨ŸÖŸáŸàÿ±Ÿäÿ©',
          balance: 5000.00,
          category: 'wholesale'
        },
        {
          code: 'CUST002', 
          name: 'ŸÖÿ§ÿ≥ÿ≥ÿ© ÿßŸÑŸÜÿ¨ŸÖÿ© ŸÑŸÑÿ¥ÿ≠ŸÜ',
          phone: '0923456789',
          email: 'star@shipping.ly',
          address: 'ÿ®ŸÜÿ∫ÿßÿ≤Ÿä - ÿ¥ÿßÿ±ÿπ ÿπŸÖÿ± ÿßŸÑŸÖÿÆÿ™ÿßÿ±',
          balance: 3200.50,
          category: 'wholesale'
        },
        {
          code: 'CUST003',
          name: 'ÿ¥ÿ±ŸÉÿ© ÿßŸÑÿ®ÿ≠ÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂',
          phone: '0934567890',
          email: 'white@sea.ly',
          address: 'ŸÖÿµÿ±ÿßÿ™ÿ© - ÿßŸÑŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿµŸÜÿßÿπŸäÿ©',
          balance: 1800.75,
          category: 'retail'
        },
        {
          code: 'CUST004',
          name: 'ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿµÿ≠ÿ±ÿßÿ° ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©',
          phone: '0945678901',
          email: 'desert@group.ly',
          address: 'ÿ≥ÿ®Ÿáÿß - ÿ¥ÿßÿ±ÿπ ÿßŸÑŸÅÿßÿ™ÿ≠',
          balance: 4500.25,
          category: 'vip'
        },
        {
          code: 'CUST005',
          name: 'ÿ¥ÿ±ŸÉÿ© ÿßŸÑÿ£ÿ∑ŸÑÿ≥ ŸÑŸÑŸÜŸÇŸÑ',
          phone: '0956789012',
          email: 'atlas@transport.ly',
          address: 'ÿßŸÑÿ≤ÿßŸàŸäÿ© - ÿßŸÑŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©',
          balance: 2100.00,
          category: 'wholesale'
        }
      ];
      
      for (const customer of testCustomers) {
        await sequelize.query(`
          INSERT INTO customers (code, name, phone, email, address, balance, category, "isActive")
          VALUES (:code, :name, :phone, :email, :address, :balance, :category, true)
        `, {
          replacements: customer,
          type: sequelize.QueryTypes.INSERT
        });
      }
      
      console.log(`‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ${testCustomers.length} ÿπŸÖŸäŸÑ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä`);
    } else {
      console.log(`‚úÖ ŸäŸàÿ¨ÿØ ${customersCount[0].count} ÿπŸÖŸäŸÑ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™`);
    }

    // 4. ÿ•ÿ∂ÿßŸÅÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
    console.log('\nüìÑ ÿ•ÿ∂ÿßŸÅÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...');
    
    const invoicesCount = await sequelize.query(
      'SELECT COUNT(*) as count FROM sales_invoices',
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (parseInt(invoicesCount[0].count) === 0) {
      // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπÿ±ŸÅÿßÿ™ ÿßŸÑÿπŸÖŸÑÿßÿ°
      const customers = await sequelize.query(
        'SELECT id FROM customers LIMIT 5',
        { type: sequelize.QueryTypes.SELECT }
      );
      
      if (customers.length > 0) {
        const testInvoices = [
          {
            invoiceNumber: 'SI-2024-001',
            customerId: customers[0].id,
            date: '2024-09-15',
            dueDate: '2024-10-15',
            totalAmount: 2500.00,
            paidAmount: 2500.00,
            status: 'paid'
          },
          {
            invoiceNumber: 'SI-2024-002',
            customerId: customers[1].id,
            date: '2024-09-16',
            dueDate: '2024-10-16',
            totalAmount: 1800.50,
            paidAmount: 900.25,
            status: 'partial'
          },
          {
            invoiceNumber: 'SI-2024-003',
            customerId: customers[2].id,
            date: '2024-09-17',
            dueDate: '2024-10-17',
            totalAmount: 3200.75,
            paidAmount: 0.00,
            status: 'pending'
          },
          {
            invoiceNumber: 'SI-2024-004',
            customerId: customers[3].id,
            date: '2024-09-18',
            dueDate: '2024-10-18',
            totalAmount: 4100.25,
            paidAmount: 4100.25,
            status: 'paid'
          },
          {
            invoiceNumber: 'SI-2024-005',
            customerId: customers[4].id,
            date: '2024-09-19',
            dueDate: '2024-10-19',
            totalAmount: 1950.00,
            paidAmount: 975.00,
            status: 'partial'
          },
          {
            invoiceNumber: 'SI-2024-006',
            customerId: customers[0].id,
            date: '2024-09-20',
            dueDate: '2024-10-20',
            totalAmount: 2750.50,
            paidAmount: 0.00,
            status: 'pending'
          }
        ];
        
        for (const invoice of testInvoices) {
          await sequelize.query(`
            INSERT INTO sales_invoices ("invoiceNumber", "customerId", date, "dueDate", "totalAmount", "paidAmount", status, "isActive")
            VALUES (:invoiceNumber, :customerId, :date, :dueDate, :totalAmount, :paidAmount, :status, true)
          `, {
            replacements: invoice,
            type: sequelize.QueryTypes.INSERT
          });
        }
        
        console.log(`‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ${testInvoices.length} ŸÅÿßÿ™Ÿàÿ±ÿ© ŸÖÿ®Ÿäÿπÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©`);
      }
    } else {
      console.log(`‚úÖ ŸäŸàÿ¨ÿØ ${invoicesCount[0].count} ŸÅÿßÿ™Ÿàÿ±ÿ© ŸÖÿ®Ÿäÿπÿßÿ™ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™`);
    }

    // 5. ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÅŸáÿßÿ±ÿ≥ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
    console.log('\nüìä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÅŸáÿßÿ±ÿ≥ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©...');
    
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_customers_code ON customers(code)',
      'CREATE INDEX IF NOT EXISTS idx_customers_active ON customers("isActive")',
      'CREATE INDEX IF NOT EXISTS idx_sales_invoices_number ON sales_invoices("invoiceNumber")',
      'CREATE INDEX IF NOT EXISTS idx_sales_invoices_customer ON sales_invoices("customerId")',
      'CREATE INDEX IF NOT EXISTS idx_sales_invoices_date ON sales_invoices(date)',
      'CREATE INDEX IF NOT EXISTS idx_sales_invoices_status ON sales_invoices(status)',
      'CREATE INDEX IF NOT EXISTS idx_sales_invoices_active ON sales_invoices("isActive")'
    ];
    
    for (const indexQuery of indexes) {
      await sequelize.query(indexQuery);
    }
    
    console.log('‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑŸÅŸáÿßÿ±ÿ≥ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©');

    // 6. ÿßÿÆÿ™ÿ®ÿßÿ± APIs
    console.log('\nüîÑ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ≠ÿ≥ÿßÿ® ŸÖŸÑÿÆÿµ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™...');
    
    const summary = await sequelize.query(`
      SELECT 
        COUNT(*) as "totalOrders",
        COALESCE(SUM("totalAmount"), 0) as "totalSales",
        COALESCE(SUM("paidAmount"), 0) as "totalPayments",
        COALESCE(AVG("totalAmount"), 0) as "averageOrderValue"
      FROM sales_invoices 
      WHERE "isActive" = true
    `, { type: sequelize.QueryTypes.SELECT });
    
    const activeCustomers = await sequelize.query(`
      SELECT COUNT(*) as count 
      FROM customers 
      WHERE "isActive" = true
    `, { type: sequelize.QueryTypes.SELECT });
    
    const result = summary[0];
    const salesSummary = {
      totalSales: parseFloat(result.totalSales || 0),
      totalOrders: parseInt(result.totalOrders || 0),
      activeCustomers: parseInt(activeCustomers[0].count || 0),
      averageOrderValue: parseFloat(result.averageOrderValue || 0),
      totalPayments: parseFloat(result.totalPayments || 0),
      monthlyGrowth: 0,
      totalInvoices: parseInt(result.totalOrders || 0),
      lowStockItems: 0
    };
    
    console.log('üìä ŸÖŸÑÿÆÿµ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™:');
    console.log(`  üí∞ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™: ${salesSummary.totalSales} ÿØ.ŸÑ`);
    console.log(`  üìÑ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™: ${salesSummary.totalOrders}`);
    console.log(`  üë• ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑŸÜÿ¥ÿ∑ŸàŸÜ: ${salesSummary.activeCustomers}`);
    console.log(`  üìä ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÇŸäŸÖÿ© ÿßŸÑÿ∑ŸÑÿ®: ${salesSummary.averageOrderValue.toFixed(2)} ÿØ.ŸÑ`);
    console.log(`  üí≥ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿØŸÅŸàÿπÿßÿ™: ${salesSummary.totalPayments} ÿØ.ŸÑ`);

    console.log('\nüéâ ÿ™ŸÖ ÿ•ÿµŸÑÿßÿ≠ ÿ¨ŸÖŸäÿπ ŸÖÿ¥ÿßŸÉŸÑ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠!');
    console.log('\nüìã ÿßŸÑŸÖŸÑÿÆÿµ ÿßŸÑŸÜŸáÿßÿ¶Ÿä:');
    console.log('  ‚úÖ ÿ¨ÿØŸàŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ° - ŸÖŸèÿµŸÑÿ≠ ŸàŸÖŸèÿ≠ÿØÿ´');
    console.log('  ‚úÖ ÿ¨ÿØŸàŸÑ ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ - ŸÖŸèÿµŸÑÿ≠ ŸàŸÖŸèÿ≠ÿØÿ´');
    console.log('  ‚úÖ ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© - ŸÖŸèÿ∂ÿßŸÅÿ©');
    console.log('  ‚úÖ ŸÅŸáÿßÿ±ÿ≥ ÿßŸÑÿ£ÿØÿßÿ° - ŸÖŸèŸÜÿ¥ÿ£ÿ©');
    console.log('  ‚úÖ APIs ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ - ÿ¨ÿßŸáÿ≤ÿ© ŸÑŸÑÿπŸÖŸÑ');
    
  } catch (error) {
    console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿµŸÑÿßÿ≠ ŸÑŸàÿ≠ÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™:', error.message);
    console.error('üìã ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿÆÿ∑ÿ£:', error);
  } finally {
    await sequelize.close();
  }
}

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ•ÿµŸÑÿßÿ≠
fixSalesDashboard();
