console.log('๐ ุจุฏุก ุฅูุดุงุก ุงูุชูุฑูุฑ ุงูููุงุฆู ูุฏููู ุงูุญุณุงุจุงุช...');

try {
  // ุงุณุชูุฑุงุฏ ุงูููุงุฐุฌ
  const modelsModule = await import('./server/src/models/index.js');
  const models = modelsModule.default;
  const { sequelize } = modelsModule;
  const { Account } = models;
  
  console.log('โ ุชู ุชุญููู ุงูููุงุฐุฌ ุจูุฌุงุญ');
  
  // ุงูุชุญูู ูู ุงูุงุชุตุงู
  await sequelize.authenticate();
  console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
  
  // ุงูุญุตูู ุนูู ุฌููุน ุงูุญุณุงุจุงุช
  const allAccounts = await Account.findAll({
    order: [['code', 'ASC']]
  });
  
  console.log('\n๐ ุชูุฑูุฑ ุฏููู ุงูุญุณุงุจุงุช ุงูููุงุฆู');
  console.log('=====================================');
  
  // ุงูุญุณุงุจุงุช ุงูุฑุฆูุณูุฉ
  console.log('\n๐ ุงูุญุณุงุจุงุช ุงูุฑุฆูุณูุฉ:');
  console.log('======================');
  
  const mainAccounts = allAccounts.filter(acc => acc.level === 1);
  for (const account of mainAccounts) {
    console.log(`${account.code} - ${account.name} (${account.nameEn})`);
    console.log(`   ุงูููุน: ${account.type} | ุงูุทุจูุนุฉ: ${account.nature} | ุงูุชูุฑูุฑ: ${account.reportType}`);
    console.log('');
  }
  
  // ุฏููู ุงูุญุณุงุจุงุช ุงููุงูู
  console.log('\n๐ ุฏููู ุงูุญุณุงุจุงุช ุงููุงูู:');
  console.log('==========================');
  
  for (const account of allAccounts) {
    const indent = '  '.repeat(account.level - 1);
    const groupIndicator = account.isGroup ? ' [ูุฌููุนุฉ]' : '';
    console.log(`${indent}${account.code} - ${account.name}${groupIndicator}`);
    console.log(`${indent}   ุงูููุน: ${account.type} | ุงูุทุจูุนุฉ: ${account.nature} | ุงููุณุชูู: ${account.level}`);
  }
  
  // ุฅุญุตุงุฆูุงุช
  console.log('\n๐ ุฅุญุตุงุฆูุงุช ุฏููู ุงูุญุณุงุจุงุช:');
  console.log('=============================');
  
  const totalAccounts = allAccounts.length;
  console.log(`ุฅุฌูุงูู ุงูุญุณุงุจุงุช: ${totalAccounts}`);
  
  // ุชูุฒูุน ุญุณุจ ุงูููุน
  const accountsByType = {};
  allAccounts.forEach(acc => {
    accountsByType[acc.type] = (accountsByType[acc.type] || 0) + 1;
  });
  
  console.log('\nุชูุฒูุน ุงูุญุณุงุจุงุช ุญุณุจ ุงูููุน:');
  Object.entries(accountsByType).forEach(([type, count]) => {
    console.log(`- ${type}: ${count} ุญุณุงุจ`);
  });
  
  // ุชูุฒูุน ุญุณุจ ุงููุณุชูู
  const accountsByLevel = {};
  allAccounts.forEach(acc => {
    accountsByLevel[acc.level] = (accountsByLevel[acc.level] || 0) + 1;
  });
  
  console.log('\nุชูุฒูุน ุงูุญุณุงุจุงุช ุญุณุจ ุงููุณุชูู:');
  Object.entries(accountsByLevel).forEach(([level, count]) => {
    console.log(`- ุงููุณุชูู ${level}: ${count} ุญุณุงุจ`);
  });
  
  // ุชูุฒูุน ุญุณุจ ุงูุทุจูุนุฉ
  const accountsByNature = {};
  allAccounts.forEach(acc => {
    accountsByNature[acc.nature] = (accountsByNature[acc.nature] || 0) + 1;
  });
  
  console.log('\nุชูุฒูุน ุงูุญุณุงุจุงุช ุญุณุจ ุงูุทุจูุนุฉ:');
  Object.entries(accountsByNature).forEach(([nature, count]) => {
    const natureName = nature === 'debit' ? 'ูุฏูู' : 'ุฏุงุฆู';
    console.log(`- ${natureName} (${nature}): ${count} ุญุณุงุจ`);
  });
  
  // ุงูุชุญูู ูู ุตุญุฉ ุงูุชุตููู
  console.log('\nโ ุงูุชุญูู ูู ุตุญุฉ ุงูุชุตููู:');
  console.log('==============================');
  
  const expectedClassification = {
    '1': { type: 'asset', nature: 'debit', name: 'ุงูุฃุตูู' },
    '2': { type: 'expense', nature: 'debit', name: 'ุงููุตุฑููุงุช' },
    '3': { type: 'liability', nature: 'credit', name: 'ุงูุงูุชุฒุงูุงุช' },
    '4': { type: 'equity', nature: 'credit', name: 'ุญููู ุงูููููุฉ' },
    '5': { type: 'revenue', nature: 'credit', name: 'ุงูุฅูุฑุงุฏุงุช' }
  };
  
  let allCorrect = true;
  
  for (const [code, expected] of Object.entries(expectedClassification)) {
    const account = mainAccounts.find(acc => acc.code === code);
    if (account) {
      const typeCorrect = account.type === expected.type;
      const natureCorrect = account.nature === expected.nature;
      const isCorrect = typeCorrect && natureCorrect;
      
      console.log(`${code} - ${expected.name}:`);
      console.log(`   ุงูููุน: ${account.type} ${typeCorrect ? 'โ' : 'โ'}`);
      console.log(`   ุงูุทุจูุนุฉ: ${account.nature} ${natureCorrect ? 'โ' : 'โ'}`);
      console.log(`   ุงูุญุงูุฉ: ${isCorrect ? 'โ ุตุญูุญ' : 'โ ูุญุชุงุฌ ุชุตุญูุญ'}`);
      console.log('');
      
      if (!isCorrect) allCorrect = false;
    } else {
      console.log(`โ ุงูุญุณุงุจ ${code} - ${expected.name} ุบูุฑ ููุฌูุฏ`);
      allCorrect = false;
    }
  }
  
  console.log(`\n๐ ูุชูุฌุฉ ุงูุชุญูู: ${allCorrect ? 'โ ุฌููุน ุงูุญุณุงุจุงุช ุตุญูุญุฉ' : 'โ ููุฌุฏ ุฃุฎุทุงุก ุชุญุชุงุฌ ุชุตุญูุญ'}`);
  
  // ููุฎุต ุงูุชุตููู ุงูููุงุฆู
  console.log('\n๐ฏ ุงูุชุตููู ุงูููุงุฆู ุงููุทุจู:');
  console.log('=============================');
  console.log('1 - ุงูุฃุตูู (Assets) - ุทุจูุนุฉ ูุฏูู โ');
  console.log('2 - ุงููุตุฑููุงุช (Expenses) - ุทุจูุนุฉ ูุฏูู โ');
  console.log('3 - ุงูุงูุชุฒุงูุงุช (Liabilities) - ุทุจูุนุฉ ุฏุงุฆู โ');
  console.log('4 - ุญููู ุงูููููุฉ (Equity) - ุทุจูุนุฉ ุฏุงุฆู โ');
  console.log('5 - ุงูุฅูุฑุงุฏุงุช (Revenue) - ุทุจูุนุฉ ุฏุงุฆู โ');
  
  console.log('\n๐ ุชู ุฅูุดุงุก ุฏููู ุงูุญุณุงุจุงุช ุจูุฌุงุญ ูููุงู ููุชุตููู ุงููุทููุจ!');
  console.log('\n๐ ููุงุญุธุงุช ูููุฉ:');
  console.log('- ุชู ุฅูุดุงุก ุงูุญุณุงุจุงุช ุงูุฑุฆูุณูุฉ ุงูุฎูุณุฉ ูููุงู ููุชุตููู ุงููุญุงุณุจู ุงูุชูููุฏู');
  console.log('- ุชู ุฅุถุงูุฉ ุญุณุงุจุงุช ูุฑุนูุฉ ุฃุณุงุณูุฉ ููู ุญุณุงุจ ุฑุฆูุณู');
  console.log('- ุฌููุน ุงูุญุณุงุจุงุช ููุง ุทุจูุนุฉ ุฃุฑุตุฏุฉ ุตุญูุญุฉ (ูุฏูู/ุฏุงุฆู)');
  console.log('- ูููู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงูุญุณุงุจุงุช ุงููุฑุนูุฉ ุญุณุจ ุงูุญุงุฌุฉ');
  
  process.exit(0);
  
} catch (error) {
  console.error('โ ุฎุทุฃ:', error.message);
  console.error(error.stack);
  process.exit(1);
}
